plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.rebecamontag'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	implementation 'com.h2database:h2:2.2.224'
	implementation 'org.postgresql:postgresql:42.1.4'
	//implementation 'org.hibernate:hibernate-core:4.1.4.Final'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.1'
	testImplementation 'org.testcontainers:testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:1.19.8"
	}
}

sourceSets {
	unitTest {
		java.srcDir("src/test/java")
		resources.srcDir("src/test/resources")
	}
	integrationTest {
		java.srcDir("src/integration-test/java")
		resources.srcDir("src/integration-test/resources")
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
	}
}

configurations {
	integrationTestImplementation.extendsFrom testImplementation
	integrationTestRuntime.extendsFrom testRuntime
}

tasks.register('integrationTest', Test) {
	useJUnitPlatform()
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
}

check.dependsOn integrationTest

//val integrationTest: SourceSet = sourceSets.create("integrationTest") {
//	java {
//		compileClasspath += sourceSets.main.get().output + sourceSets.test.get().output
//		runtimeClasspath += sourceSets.main.get().output + sourceSets.test.get().output
//		srcDir("src/integration-test/java")
//	}
//	resources.srcDir("src/integration-test/resources")
//}
//
//configurations[integrationTest.implementationConfigurationName].extendsFrom(configurations.testImplementation.get())
//configurations[integrationTest.runtimeOnlyConfigurationName].extendsFrom(configurations.testRuntimeOnly.get())
//
//val integrationTestTask = tasks.register<Test>("integrationTest") {
//	group = "verification"
//
//	useJUnitPlatform()
//
//	testClassesDirs = integrationTest.output.classesDirs
//	classpath = sourceSets["integrationTest"].runtimeClasspath
//
//	shouldRunAfter("test")
//}
//
//tasks.check {
//	dependsOn(integrationTestTask)
//}

tasks.named('test') {
	useJUnitPlatform()
}
